/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AbsensiInterface extends utils.Interface {
  functions: {
    "addMahasiswa(address,string,string)": FunctionFragment;
    "getNamaMahasiswa(address)": FunctionFragment;
    "getNimMahasiswa(address)": FunctionFragment;
    "mahasiswa(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "setNamaMahasiswa(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMahasiswa"
      | "getNamaMahasiswa"
      | "getNimMahasiswa"
      | "mahasiswa"
      | "owner"
      | "setNamaMahasiswa"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMahasiswa",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getNamaMahasiswa",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNimMahasiswa",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mahasiswa",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNamaMahasiswa",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMahasiswa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNamaMahasiswa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNimMahasiswa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mahasiswa", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNamaMahasiswa",
    data: BytesLike
  ): Result;

  events: {
    "MahasiswaAdded(address)": EventFragment;
    "NamaMahasiswaUpdated(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MahasiswaAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NamaMahasiswaUpdated"): EventFragment;
}

export interface MahasiswaAddedEventObject {
  mahasiswa: string;
}
export type MahasiswaAddedEvent = TypedEvent<
  [string],
  MahasiswaAddedEventObject
>;

export type MahasiswaAddedEventFilter = TypedEventFilter<MahasiswaAddedEvent>;

export interface NamaMahasiswaUpdatedEventObject {
  mahasiswa: string;
  nama: string;
}
export type NamaMahasiswaUpdatedEvent = TypedEvent<
  [string, string],
  NamaMahasiswaUpdatedEventObject
>;

export type NamaMahasiswaUpdatedEventFilter =
  TypedEventFilter<NamaMahasiswaUpdatedEvent>;

export interface Absensi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbsensiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      _nim: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNamaMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNimMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mahasiswa(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { nim: string; nama: string; exist: boolean }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setNamaMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addMahasiswa(
    _mahasiswa: PromiseOrValue<string>,
    _nim: PromiseOrValue<string>,
    _nama: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNamaMahasiswa(
    _mahasiswa: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNimMahasiswa(
    _mahasiswa: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  mahasiswa(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & { nim: string; nama: string; exist: boolean }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  setNamaMahasiswa(
    _mahasiswa: PromiseOrValue<string>,
    _nama: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      _nim: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getNamaMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNimMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    mahasiswa(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & { nim: string; nama: string; exist: boolean }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    setNamaMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MahasiswaAdded(address)"(mahasiswa?: null): MahasiswaAddedEventFilter;
    MahasiswaAdded(mahasiswa?: null): MahasiswaAddedEventFilter;

    "NamaMahasiswaUpdated(address,string)"(
      mahasiswa?: null,
      nama?: null
    ): NamaMahasiswaUpdatedEventFilter;
    NamaMahasiswaUpdated(
      mahasiswa?: null,
      nama?: null
    ): NamaMahasiswaUpdatedEventFilter;
  };

  estimateGas: {
    addMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      _nim: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNamaMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNimMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mahasiswa(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setNamaMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      _nim: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNamaMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNimMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mahasiswa(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNamaMahasiswa(
      _mahasiswa: PromiseOrValue<string>,
      _nama: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
